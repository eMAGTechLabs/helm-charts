# replicaCount -- Number of pods to be deployed
replicaCount: 1

# image -- docker image to be used
image:
  repository: haproxy
  tag: 2.2-alpine
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template

# resources -- resource limits and request for container
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 1
  #   memory: 1024Mi
  # requests:
  #  cpu: 500m
  #  memory: 512Mi

# ports -- Every port that should be exposed to others apps should be listed here
ports:
  metrics:
    protocol: TCP
    containerPort: 8404
#  my-backend:
#    protocol: TCP
#    containerPort: 23306
#  my-second-backend:
#    protocol: TCP
#    containerPort: 16384

## Define configuration files
# We recommend the split of configs into multiple files
# every port opened in configs should be added to the ports section
# configFiles -- List of haproxy config files
# @default -- `{"global.cfg": {}, "defaults.cfg": {}, "metrics.cfg": {}}`
configFiles:
  global.cfg: |-
    global
      maxconn 10000
      log 127.0.0.1 local0
      nbproc 1
      nbthread 1

  defaults.cfg: |-
    defaults
      backlog           2000
      timeout connect   10s
      timeout client    30s
      timeout server    30s
      timeout check     10s
      log global
      mode tcp
      option httplog
      maxconn 3000

  metrics.cfg: |-
    frontend metrics
      mode http
      log global
      maxconn 10
      bind *:8404
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      stats enable
      stats uri /
      stats refresh 10s
      stats admin if LOCALHOST

#  backends.cfg: |-
#    listen my-backend
#      bind *:23306
#      option httpchk
#
#    listen my-second-backend
#      bind *:16384

## ServiceMonitor consumed by prometheus-operator
serviceMonitor:
  # serviceMonitor.enabled -- If the operator is installed in your cluster, set to true to create a ServiceMonitor
  enabled: false
  interval: "15s"
  targetLabels: []
  podTargetLabels: []
  # serviceMonitor.metricsPort -- metrics port defined in ports section. Can be name of port or port itself
  metricsPort: metrics
  # serviceMonitor.metricsPath -- the path where metrics can be found
  metricsPath: /metrics
  ## Namespace in which the service monitor is created
  # serviceMonitor.namespace -- deploy ServiceMonitor in a different namespace
  # @default -- release namespace

  # Added to the ServiceMonitor object so that prometheus-operator is able to discover it
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []

## Deploy ingress for stats interface
ingress:
  # ingress.enabled -- Enable ingress for stats interface
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  host: host.example.com
  path: /
  # ingress.port -- usually stats port should be exposed
  port: metrics
  tls: []

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe: {}

readinessProbe: {}
